package {{packageName}}.controller;

import com.koreanair.mybatis.Pagination;
import {{packageName}}.dao.{{pojoName}}Dao;
import {{packageName}}.model.{{pojoName}};
import com.koreanair.util.BeanUtil;
import com.koreanair.util.Transform;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.time.LocalDate;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/{{snakebar pojoName}}")
public class PdmUnitController {

    @Autowired
    {{pojoName}}Dao {{firstCap pojoName}}Dao;

    Transform<String, {{pojoName}}> transform = id -> {
        {{pojoName}} t = new {{pojoName}}()
        /*
            Your Code here!
        */
            return t;
        }
        else {
            return null;
        }
    };

    @GetMapping
    public Pagination select{{pojoName}}(@RequestParam Map<String, Object> map, @RequestParam(defaultValue = "1") Integer page, @RequestParam(defaultValue = "20") Integer size) {
        return {{firstCap pojoName}}Dao.selectWithPage(map, Pagination.of(page, size));
    }

    @PostMapping
    public ResponseEntity<?> insert{{pojoName}}(@Valid @RequestBody {{pojoName}} body) {
        Optional optional = {{firstCap pojoName}}Dao.checkIf(body);
        if(optional.isPresent())
            return ResponseEntity.status(HttpStatus.CONFLICT).build();

        {{firstCap pojoName}}Dao.insert(body);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> select{{pojoName}}(@PathVariable String id, @RequestParam Map<String ,Object> map) {
        {{pojoName}} pojo = transform.apply(id);
        BeanUtil.copyToMap(pojo, map);
        Optional optional = {{firstCap pojoName}}Dao
                .select(map)
                .stream()
                .findFirst();

        if(optional.isPresent())
            return ResponseEntity.ok(optional);
        else
            return ResponseEntity.notFound().build();
    }


    @PutMapping("/{id}")
    public ResponseEntity<?> update{{pojoName}}(@PathVariable String id, @Valid @RequestBody {{pojoName}} body) {
        {{pojoName}} pojo = transform.apply(id);
        BeanUtils.copyProperties(pojo, body);
        Optional optional = {{firstCap pojoName}}Dao.update(body);
        if(optional.isPresent())
            return ResponseEntity.ok().build();
        else
            return ResponseEntity.notFound().build();
    }


    @DeleteMapping("/{id}")
    public ResponseEntity<?> delete{{pojoName}}(@PathVariable String id) {
        {{pojoName}} model = transform.apply(id);
        if({{firstCap pojoName}}Dao.delete(model).isPresent())
            return ResponseEntity.noContent().build();

        return ResponseEntity.noFound().build();
    }


}
